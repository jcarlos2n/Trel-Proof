// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id     String  @id @default(uuid())
  email  String  @unique
  boards Board[]
  participant BoardParticipant[]

  Password Password?
}

model Password {
  id        String  @id @default(uuid())
  salt      String
  hash      String
  User   User @relation(fields: [userId], references: [id])
  userId String  @unique
}

model Board {
  id        Int      @id @default(autoincrement())
  name      String
  color     String   @default("#e0e0e0")
  createdAt DateTime @default(now())
  columns   Column[]
  Task      Task[]
  owner   User  @relation(fields: [ownerId], references: [id])
  ownerId String
  participants BoardParticipant[]
}

model BoardParticipant {
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  board     Board  @relation(fields: [boardId], references: [id])
  boardId   Int

  @@id([userId, boardId])
}

model Column {
  id      String @id @default(uuid())
  name    String
  order   Float  @default(0)
  tasks   Task[]
  Board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int
}

model Task {
  id      String  @id @default(uuid())
  title   String
  content String?
  priority Int @default(0)
  subTasks SubTask[]
  order Float

  Column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId String

  Board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int
}

model SubTask {
  id      String  @id @default(uuid())
  title   String
  content String?

  Task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

